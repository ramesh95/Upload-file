"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const upload_1 = require("./resource/upload");
const express = require("express");
var multer = require('multer');
var bodyParser = require('body-parser');
var app = express();
var router = express.Router();
app.use(bodyParser.json());
var storage = multer.diskStorage({
    destination: function (req, file, callback) {
        callback(null, "./Images");
    },
    filename: function (req, file, callback) {
        callback(null, file.fieldname + "_" + Date.now() + "_" + file.originalname);
    }
});
var upload = multer({
    storage: storage
}).array("imgUploader", 3); //Field name and max count
router.get("/", function (req, res) {
    res.sendFile(__dirname + "/index.html");
});
router.post("/api/Upload", function (req, res) {
    upload(req, res, function (err) {
        console.log("path: ", req.path);
        console.log("Query: ", req.query);
        console.log("Header: ", req.header);
        console.log("Files", req.files);
        console.log("Files", req.files[0].originalname);
        if (err) {
            console.log(err);
            return res.end("Something went wrong!");
        }
        let imageEndpoints = new upload_1.ImageEndpoints();
        imageEndpoints.addImage(req.files[0].originalname, req.files[0].destination);
        return res.end("File uploaded sucessfully!.");
    });
});
module.exports = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy91cGxvYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBa0Q7QUFDbEQsbUNBQW1DO0FBQ25DLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDeEMsSUFBSSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFDcEIsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFBO0FBQzdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFFM0IsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUM3QixXQUFXLEVBQUUsVUFBUyxHQUFPLEVBQUUsSUFBUSxFQUFFLFFBQVk7UUFDakQsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0QsUUFBUSxFQUFFLFVBQVMsR0FBTyxFQUFFLElBQVEsRUFBRSxRQUFZO1FBQzlDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEYsQ0FBQztDQUNKLENBQUMsQ0FBQztBQUVILElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNoQixPQUFPLEVBQUUsT0FBTztDQUNuQixDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQjtBQUV0RCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFTLEdBQU8sRUFBRSxHQUFPO0lBQ3JDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDO0FBQzVDLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsVUFBUyxHQUFPLEVBQUUsR0FBTztJQUNoRCxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxVQUFTLEdBQU87UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDL0MsSUFBSSxHQUFHLEVBQUU7WUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsSUFBSSxjQUFjLEdBQUcsSUFBSSx1QkFBYyxFQUFFLENBQUM7UUFDMUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzVFLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyIsImZpbGUiOiJ1cGxvYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbWFnZUVuZHBvaW50cyB9IGZyb20gXCIuL3Jlc291cmNlL3VwbG9hZFwiXG5pbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxudmFyIG11bHRlciA9IHJlcXVpcmUoJ211bHRlcicpO1xudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xudmFyIGFwcCA9IGV4cHJlc3MoKTtcbnZhciByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxudmFyIHN0b3JhZ2UgPSBtdWx0ZXIuZGlza1N0b3JhZ2Uoe1xuICAgIGRlc3RpbmF0aW9uOiBmdW5jdGlvbihyZXE6YW55LCBmaWxlOmFueSwgY2FsbGJhY2s6YW55KSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIFwiLi9JbWFnZXNcIik7XG4gICAgfSxcbiAgICBmaWxlbmFtZTogZnVuY3Rpb24ocmVxOmFueSwgZmlsZTphbnksIGNhbGxiYWNrOmFueSkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlLmZpZWxkbmFtZSArIFwiX1wiICsgRGF0ZS5ub3coKSArIFwiX1wiICsgZmlsZS5vcmlnaW5hbG5hbWUpO1xuICAgIH1cbn0pO1xuXG52YXIgdXBsb2FkID0gbXVsdGVyKHtcbiAgICBzdG9yYWdlOiBzdG9yYWdlXG59KS5hcnJheShcImltZ1VwbG9hZGVyXCIsIDMpOyAvL0ZpZWxkIG5hbWUgYW5kIG1heCBjb3VudFxuXG5yb3V0ZXIuZ2V0KFwiL1wiLCBmdW5jdGlvbihyZXE6YW55LCByZXM6YW55KSB7XG4gICAgcmVzLnNlbmRGaWxlKF9fZGlybmFtZSArIFwiL2luZGV4Lmh0bWxcIik7XG59KTtcblxucm91dGVyLnBvc3QoXCIvYXBpL1VwbG9hZFwiLCBmdW5jdGlvbihyZXE6YW55LCByZXM6YW55KSB7XG4gICAgdXBsb2FkKHJlcSwgcmVzLCBmdW5jdGlvbihlcnI6YW55KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicGF0aDogXCIsIHJlcS5wYXRoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJRdWVyeTogXCIsIHJlcS5xdWVyeSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSGVhZGVyOiBcIiwgcmVxLmhlYWRlcik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRmlsZXNcIiwgcmVxLmZpbGVzKVxuICAgICAgICBjb25zb2xlLmxvZyhcIkZpbGVzXCIsIHJlcS5maWxlc1swXS5vcmlnaW5hbG5hbWUpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICByZXR1cm4gcmVzLmVuZChcIlNvbWV0aGluZyB3ZW50IHdyb25nIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW1hZ2VFbmRwb2ludHMgPSBuZXcgSW1hZ2VFbmRwb2ludHMoKTtcbiAgICAgICAgaW1hZ2VFbmRwb2ludHMuYWRkSW1hZ2UocmVxLmZpbGVzWzBdLm9yaWdpbmFsbmFtZSwgcmVxLmZpbGVzWzBdLmRlc3RpbmF0aW9uKVxuICAgICAgICByZXR1cm4gcmVzLmVuZChcIkZpbGUgdXBsb2FkZWQgc3VjZXNzZnVsbHkhLlwiKTtcbiAgICB9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjsiXX0=
